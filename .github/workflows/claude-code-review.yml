name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '**/*.md'

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Automated review prompt
          prompt: |
            Please review this pull request and provide feedback based on the file types:

            **Context: Go 1.24+ Modern Practices**
            This project uses Go 1.25.3 with modern tooling patterns:
            - The `tool` directive in go.mod (introduced in Go 1.24) declares development tools
            - Tools are invoked with `go tool <name>` (e.g., `go tool golangci-lint`)
            - This is the modern approach and replaces the legacy tools.go pattern
            - All make commands should use `go tool` prefix for tools declared in the tool block
            - Go 1.25.3 is the current stable version (not a typo)

            **For Go Code Files:**

            **BLOCKERS (must be fixed):**
            - Comments that don't explain WHY (comments should only ever explain _why_ and never _what_ - the code should be self-documenting)
            - Security vulnerabilities
            - Tests that test implementation details instead of behavior

            **Code Quality:**
            - Go idioms and best practices
            - Error handling patterns
            - Security considerations

            **Testing Guidelines:**
            - Tests should verify application behavior, not implementation details
            - Tests should be readable and maintainable
            - Tests should use descriptive names that explain the scenario being tested
            - Avoid testing internal functions directly - test through public interfaces
            - Mock external dependencies, not internal code

            **Comments Policy:**
            - Flag ANY comment that explains WHAT the code does as a BLOCKER
            - Comments should only explain WHY decisions were made
            - Prefer descriptive variable/function names over explanatory comments
            - Code should be self-documenting through clear naming

            **For Documentation Files (.md):**

            **Documentation Quality:**
            - Clarity and completeness of instructions
            - Accuracy of code examples
            - Consistency with project architecture and conventions
            - Security considerations are properly documented
            - Step-by-step instructions are logical and complete
            - Verification procedures are adequate
            - Links and references are correct

            The CI pipeline will run tests, linting, and security scanning automatically.
            Be constructive and helpful in your feedback.

          # Use sticky comments to reuse same PR comment on each push
          use_sticky_comment: true

          # Use Sonnet 4.5 for reviews
          claude_args: '--model claude-sonnet-4-5-20250929'

