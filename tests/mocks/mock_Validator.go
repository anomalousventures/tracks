// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator struct {
	mock.Mock
}

type MockValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidator) EXPECT() *MockValidator_Expecter {
	return &MockValidator_Expecter{mock: &_m.Mock}
}

// ValidateDatabaseDriver provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateDatabaseDriver(ctx context.Context, driver string) error {
	ret := _mock.Called(ctx, driver)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDatabaseDriver")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, driver)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidator_ValidateDatabaseDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateDatabaseDriver'
type MockValidator_ValidateDatabaseDriver_Call struct {
	*mock.Call
}

// ValidateDatabaseDriver is a helper method to define mock.On call
//   - ctx context.Context
//   - driver string
func (_e *MockValidator_Expecter) ValidateDatabaseDriver(ctx interface{}, driver interface{}) *MockValidator_ValidateDatabaseDriver_Call {
	return &MockValidator_ValidateDatabaseDriver_Call{Call: _e.mock.On("ValidateDatabaseDriver", ctx, driver)}
}

func (_c *MockValidator_ValidateDatabaseDriver_Call) Run(run func(ctx context.Context, driver string)) *MockValidator_ValidateDatabaseDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateDatabaseDriver_Call) Return(err error) *MockValidator_ValidateDatabaseDriver_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidator_ValidateDatabaseDriver_Call) RunAndReturn(run func(ctx context.Context, driver string) error) *MockValidator_ValidateDatabaseDriver_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateDirectory provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateDirectory(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDirectory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidator_ValidateDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateDirectory'
type MockValidator_ValidateDirectory_Call struct {
	*mock.Call
}

// ValidateDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockValidator_Expecter) ValidateDirectory(ctx interface{}, path interface{}) *MockValidator_ValidateDirectory_Call {
	return &MockValidator_ValidateDirectory_Call{Call: _e.mock.On("ValidateDirectory", ctx, path)}
}

func (_c *MockValidator_ValidateDirectory_Call) Run(run func(ctx context.Context, path string)) *MockValidator_ValidateDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateDirectory_Call) Return(err error) *MockValidator_ValidateDirectory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidator_ValidateDirectory_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockValidator_ValidateDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateModulePath provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateModulePath(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ValidateModulePath")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidator_ValidateModulePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateModulePath'
type MockValidator_ValidateModulePath_Call struct {
	*mock.Call
}

// ValidateModulePath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockValidator_Expecter) ValidateModulePath(ctx interface{}, path interface{}) *MockValidator_ValidateModulePath_Call {
	return &MockValidator_ValidateModulePath_Call{Call: _e.mock.On("ValidateModulePath", ctx, path)}
}

func (_c *MockValidator_ValidateModulePath_Call) Run(run func(ctx context.Context, path string)) *MockValidator_ValidateModulePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateModulePath_Call) Return(err error) *MockValidator_ValidateModulePath_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidator_ValidateModulePath_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockValidator_ValidateModulePath_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateProjectName provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateProjectName(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProjectName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidator_ValidateProjectName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProjectName'
type MockValidator_ValidateProjectName_Call struct {
	*mock.Call
}

// ValidateProjectName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockValidator_Expecter) ValidateProjectName(ctx interface{}, name interface{}) *MockValidator_ValidateProjectName_Call {
	return &MockValidator_ValidateProjectName_Call{Call: _e.mock.On("ValidateProjectName", ctx, name)}
}

func (_c *MockValidator_ValidateProjectName_Call) Run(run func(ctx context.Context, name string)) *MockValidator_ValidateProjectName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateProjectName_Call) Return(err error) *MockValidator_ValidateProjectName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidator_ValidateProjectName_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockValidator_ValidateProjectName_Call {
	_c.Call.Return(run)
	return _c
}
