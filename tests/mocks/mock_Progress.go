// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockProgress creates a new instance of MockProgress. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProgress(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProgress {
	mock := &MockProgress{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProgress is an autogenerated mock type for the Progress type
type MockProgress struct {
	mock.Mock
}

type MockProgress_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProgress) EXPECT() *MockProgress_Expecter {
	return &MockProgress_Expecter{mock: &_m.Mock}
}

// Done provides a mock function for the type MockProgress
func (_mock *MockProgress) Done() {
	_mock.Called()
	return
}

// MockProgress_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockProgress_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockProgress_Expecter) Done() *MockProgress_Done_Call {
	return &MockProgress_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockProgress_Done_Call) Run(run func()) *MockProgress_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProgress_Done_Call) Return() *MockProgress_Done_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProgress_Done_Call) RunAndReturn(run func()) *MockProgress_Done_Call {
	_c.Run(run)
	return _c
}

// Increment provides a mock function for the type MockProgress
func (_mock *MockProgress) Increment(n int64) {
	_mock.Called(n)
	return
}

// MockProgress_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockProgress_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - n int64
func (_e *MockProgress_Expecter) Increment(n interface{}) *MockProgress_Increment_Call {
	return &MockProgress_Increment_Call{Call: _e.mock.On("Increment", n)}
}

func (_c *MockProgress_Increment_Call) Run(run func(n int64)) *MockProgress_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProgress_Increment_Call) Return() *MockProgress_Increment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProgress_Increment_Call) RunAndReturn(run func(n int64)) *MockProgress_Increment_Call {
	_c.Run(run)
	return _c
}
