// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/anomalousventures/tracks/internal/cli/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRenderer creates a new instance of MockRenderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRenderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRenderer {
	mock := &MockRenderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRenderer is an autogenerated mock type for the Renderer type
type MockRenderer struct {
	mock.Mock
}

type MockRenderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRenderer) EXPECT() *MockRenderer_Expecter {
	return &MockRenderer_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function for the type MockRenderer
func (_mock *MockRenderer) Flush() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRenderer_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockRenderer_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockRenderer_Expecter) Flush() *MockRenderer_Flush_Call {
	return &MockRenderer_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockRenderer_Flush_Call) Run(run func()) *MockRenderer_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRenderer_Flush_Call) Return(err error) *MockRenderer_Flush_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRenderer_Flush_Call) RunAndReturn(run func() error) *MockRenderer_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Progress provides a mock function for the type MockRenderer
func (_mock *MockRenderer) Progress(spec interfaces.ProgressSpec) interfaces.Progress {
	ret := _mock.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 interfaces.Progress
	if returnFunc, ok := ret.Get(0).(func(interfaces.ProgressSpec) interfaces.Progress); ok {
		r0 = returnFunc(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Progress)
		}
	}
	return r0
}

// MockRenderer_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type MockRenderer_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
//   - spec interfaces.ProgressSpec
func (_e *MockRenderer_Expecter) Progress(spec interface{}) *MockRenderer_Progress_Call {
	return &MockRenderer_Progress_Call{Call: _e.mock.On("Progress", spec)}
}

func (_c *MockRenderer_Progress_Call) Run(run func(spec interfaces.ProgressSpec)) *MockRenderer_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interfaces.ProgressSpec
		if args[0] != nil {
			arg0 = args[0].(interfaces.ProgressSpec)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRenderer_Progress_Call) Return(progress interfaces.Progress) *MockRenderer_Progress_Call {
	_c.Call.Return(progress)
	return _c
}

func (_c *MockRenderer_Progress_Call) RunAndReturn(run func(spec interfaces.ProgressSpec) interfaces.Progress) *MockRenderer_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// Section provides a mock function for the type MockRenderer
func (_mock *MockRenderer) Section(sec interfaces.Section) {
	_mock.Called(sec)
	return
}

// MockRenderer_Section_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Section'
type MockRenderer_Section_Call struct {
	*mock.Call
}

// Section is a helper method to define mock.On call
//   - sec interfaces.Section
func (_e *MockRenderer_Expecter) Section(sec interface{}) *MockRenderer_Section_Call {
	return &MockRenderer_Section_Call{Call: _e.mock.On("Section", sec)}
}

func (_c *MockRenderer_Section_Call) Run(run func(sec interfaces.Section)) *MockRenderer_Section_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interfaces.Section
		if args[0] != nil {
			arg0 = args[0].(interfaces.Section)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRenderer_Section_Call) Return() *MockRenderer_Section_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRenderer_Section_Call) RunAndReturn(run func(sec interfaces.Section)) *MockRenderer_Section_Call {
	_c.Run(run)
	return _c
}

// Table provides a mock function for the type MockRenderer
func (_mock *MockRenderer) Table(t interfaces.Table) {
	_mock.Called(t)
	return
}

// MockRenderer_Table_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Table'
type MockRenderer_Table_Call struct {
	*mock.Call
}

// Table is a helper method to define mock.On call
//   - t interfaces.Table
func (_e *MockRenderer_Expecter) Table(t interface{}) *MockRenderer_Table_Call {
	return &MockRenderer_Table_Call{Call: _e.mock.On("Table", t)}
}

func (_c *MockRenderer_Table_Call) Run(run func(t interfaces.Table)) *MockRenderer_Table_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interfaces.Table
		if args[0] != nil {
			arg0 = args[0].(interfaces.Table)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRenderer_Table_Call) Return() *MockRenderer_Table_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRenderer_Table_Call) RunAndReturn(run func(t interfaces.Table)) *MockRenderer_Table_Call {
	_c.Run(run)
	return _c
}

// Title provides a mock function for the type MockRenderer
func (_mock *MockRenderer) Title(s string) {
	_mock.Called(s)
	return
}

// MockRenderer_Title_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Title'
type MockRenderer_Title_Call struct {
	*mock.Call
}

// Title is a helper method to define mock.On call
//   - s string
func (_e *MockRenderer_Expecter) Title(s interface{}) *MockRenderer_Title_Call {
	return &MockRenderer_Title_Call{Call: _e.mock.On("Title", s)}
}

func (_c *MockRenderer_Title_Call) Run(run func(s string)) *MockRenderer_Title_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRenderer_Title_Call) Return() *MockRenderer_Title_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRenderer_Title_Call) RunAndReturn(run func(s string)) *MockRenderer_Title_Call {
	_c.Run(run)
	return _c
}
