// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockBuildInfo creates a new instance of MockBuildInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuildInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuildInfo {
	mock := &MockBuildInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBuildInfo is an autogenerated mock type for the BuildInfo type
type MockBuildInfo struct {
	mock.Mock
}

type MockBuildInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuildInfo) EXPECT() *MockBuildInfo_Expecter {
	return &MockBuildInfo_Expecter{mock: &_m.Mock}
}

// GetCommit provides a mock function for the type MockBuildInfo
func (_mock *MockBuildInfo) GetCommit() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCommit")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockBuildInfo_GetCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommit'
type MockBuildInfo_GetCommit_Call struct {
	*mock.Call
}

// GetCommit is a helper method to define mock.On call
func (_e *MockBuildInfo_Expecter) GetCommit() *MockBuildInfo_GetCommit_Call {
	return &MockBuildInfo_GetCommit_Call{Call: _e.mock.On("GetCommit")}
}

func (_c *MockBuildInfo_GetCommit_Call) Run(run func()) *MockBuildInfo_GetCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBuildInfo_GetCommit_Call) Return(s string) *MockBuildInfo_GetCommit_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockBuildInfo_GetCommit_Call) RunAndReturn(run func() string) *MockBuildInfo_GetCommit_Call {
	_c.Call.Return(run)
	return _c
}

// GetDate provides a mock function for the type MockBuildInfo
func (_mock *MockBuildInfo) GetDate() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDate")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockBuildInfo_GetDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDate'
type MockBuildInfo_GetDate_Call struct {
	*mock.Call
}

// GetDate is a helper method to define mock.On call
func (_e *MockBuildInfo_Expecter) GetDate() *MockBuildInfo_GetDate_Call {
	return &MockBuildInfo_GetDate_Call{Call: _e.mock.On("GetDate")}
}

func (_c *MockBuildInfo_GetDate_Call) Run(run func()) *MockBuildInfo_GetDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBuildInfo_GetDate_Call) Return(s string) *MockBuildInfo_GetDate_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockBuildInfo_GetDate_Call) RunAndReturn(run func() string) *MockBuildInfo_GetDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function for the type MockBuildInfo
func (_mock *MockBuildInfo) GetVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockBuildInfo_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockBuildInfo_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *MockBuildInfo_Expecter) GetVersion() *MockBuildInfo_GetVersion_Call {
	return &MockBuildInfo_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *MockBuildInfo_GetVersion_Call) Run(run func()) *MockBuildInfo_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBuildInfo_GetVersion_Call) Return(s string) *MockBuildInfo_GetVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockBuildInfo_GetVersion_Call) RunAndReturn(run func() string) *MockBuildInfo_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}
