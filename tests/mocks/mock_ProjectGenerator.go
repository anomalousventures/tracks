// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectGenerator creates a new instance of MockProjectGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectGenerator {
	mock := &MockProjectGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectGenerator is an autogenerated mock type for the ProjectGenerator type
type MockProjectGenerator struct {
	mock.Mock
}

type MockProjectGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectGenerator) EXPECT() *MockProjectGenerator_Expecter {
	return &MockProjectGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockProjectGenerator
func (_mock *MockProjectGenerator) Generate(ctx context.Context, cfg any) error {
	ret := _mock.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) error); ok {
		r0 = returnFunc(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockProjectGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg any
func (_e *MockProjectGenerator_Expecter) Generate(ctx interface{}, cfg interface{}) *MockProjectGenerator_Generate_Call {
	return &MockProjectGenerator_Generate_Call{Call: _e.mock.On("Generate", ctx, cfg)}
}

func (_c *MockProjectGenerator_Generate_Call) Run(run func(ctx context.Context, cfg any)) *MockProjectGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectGenerator_Generate_Call) Return(err error) *MockProjectGenerator_Generate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectGenerator_Generate_Call) RunAndReturn(run func(ctx context.Context, cfg any) error) *MockProjectGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockProjectGenerator
func (_mock *MockProjectGenerator) Validate(cfg any) error {
	ret := _mock.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectGenerator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockProjectGenerator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - cfg any
func (_e *MockProjectGenerator_Expecter) Validate(cfg interface{}) *MockProjectGenerator_Validate_Call {
	return &MockProjectGenerator_Validate_Call{Call: _e.mock.On("Validate", cfg)}
}

func (_c *MockProjectGenerator_Validate_Call) Run(run func(cfg any)) *MockProjectGenerator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectGenerator_Validate_Call) Return(err error) *MockProjectGenerator_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectGenerator_Validate_Call) RunAndReturn(run func(cfg any) error) *MockProjectGenerator_Validate_Call {
	_c.Call.Return(run)
	return _c
}
